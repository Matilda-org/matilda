var URL = '<%=j root_url %>'
var CACHE_NAME = '<%= APPLICATION_VERSION %>'

function onInstall(event) {
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([])
    })
  )
}

function onActivate(event) {
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      console.log('[ServiceWorker] Service Worker installed!')

      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin

          return cacheName !== CACHE_NAME
        }).map(function(cacheName) {
          return caches.delete(cacheName)
        })
      )
    })
  )
}

function onFetch(event) {
  event.respondWith(
    caches.open(CACHE_NAME).then(function(cache) {
      return cache.match(event.request).then(function (response) {
        if (response) {
          return response
        }
        return fetch(event.request).then(function(response) {
          if (
            event.request.url.startsWith(URL + 'assets') ||
            event.request.url.startsWith(URL + 'statics')
          ) {
            console.log('[ServiceWorker] Saving', event.request.url)
            cache.put(event.request, response.clone())
          }
          return response
        }).catch(function (error) {
          console.log('[ServiceWorker] Error while fetching data!', error)
          return null
        })
      })
    })
  )
}

self.addEventListener('install', onInstall)
self.addEventListener('activate', onActivate)
self.addEventListener('fetch', onFetch)
